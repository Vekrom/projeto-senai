import axios from "axios"

// Configura√ß√£o base do axios
const api = axios.create({
  baseURL: "http://localhost:3001", // URL do seu backend
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
})

// Interceptor para adicionar o token automaticamente
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token")
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    console.log(`üöÄ Fazendo requisi√ß√£o: ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`)
    return config
  },
  (error) => {
    console.error("Erro na requisi√ß√£o:", error)
    return Promise.reject(error)
  },
)

// Interceptor para tratar respostas
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Resposta recebida: ${response.status} ${response.config.url}`)
    return response
  },
  (error) => {
    console.error(`‚ùå Erro na resposta: ${error.response?.status} ${error.config?.url}`)

    if (error.response?.status === 401) {
      // Token expirado ou inv√°lido
      localStorage.removeItem("token")
      localStorage.removeItem("tipo")
      window.location.href = "/login"
    }

    return Promise.reject(error)
  },
)

// Fun√ß√£o para definir o token de autentica√ß√£o
export const setAuthToken = (token) => {
  if (token) {
    api.defaults.headers.common["Authorization"] = `Bearer ${token}`
    localStorage.setItem("token", token)
  } else {
    delete api.defaults.headers.common["Authorization"]
    localStorage.removeItem("token")
  }
}

// Configurar token se j√° existir no localStorage
const token = localStorage.getItem("token")
if (token) {
  setAuthToken(token)
}

export default api
